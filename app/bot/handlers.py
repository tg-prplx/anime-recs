import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from .kb import get_main_kb, get_confirm_inline_kb, get_list_inline_kb, get_anime_inline_kb
from .utils import load_user_views, save_user_views, anime_preview, load_anime_dataframe, ANIME_DB_PATH, USER_DATA_PATH, TOKEN
from recs.tag_genres import top_similar_by_tags_genres
from recs.fuzzy_search import find_by_synonyms_fuzzy


bot = Bot(token=TOKEN)
dp = Dispatcher()

df = load_anime_dataframe()
user_views = load_user_views()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_views.setdefault(message.from_user.id, set())
    await message.answer(
        "–π–æ—É! —è –Ω–∞–π–¥—É —Ç–≤–æ–π —Ç–æ–ø—á–∏–∫ –∞–Ω–∏–º–µ üç•\n\n"
        "–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π—Ç–ª–∞, –º–æ–∂–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏):",
        reply_markup=get_main_kb()
    )

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ")
async def add_anime_instruction(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ (–ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ú–æ–∂–Ω–æ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ ‚Äî –Ω–∞–π–¥—É –ø–æ —Å–º—ã—Å–ª—É!",
        reply_markup=get_main_kb()
    )

@dp.message(F.text == "üå∏ –ú–æ–π —Å–ø–∏—Å–æ–∫")
async def show_my_list(message: Message):
    user_id = message.from_user.id
    user_list = user_views.get(user_id, set())
    if not user_list:
        await message.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ! –î–æ–±–∞–≤—å —á—Ç–æ-–Ω–∏–±—É–¥—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üëá", reply_markup=get_main_kb())
        return
    txt = "üå∏ <b>–¢–≤–æ–π —Å–ø–∏—Å–æ–∫:</b>\n" + "\n".join(f"‚Ä¢ {t}" for t in sorted(user_list))
    await message.answer(txt, reply_markup=get_list_inline_kb(), parse_mode="HTML")

@dp.message(F.text == "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def pre_clear_list(message: Message):
    user_id = message.from_user.id
    user_list = user_views.get(user_id, set())
    if not user_list:
        await message.answer("–°–ø–∏—Å–æ–∫ –∏ —Ç–∞–∫ –ø—É—Å—Ç ü´•", reply_markup=get_main_kb())
        return
    await message.answer(
        "‚ùóÔ∏è <b>–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –≤—Å—ë —É–¥–∞–ª–∏—Ç—å?</b>\n–≠—Ç–æ –Ω–∞–≤—Å–µ–≥–¥–∞!",
        reply_markup=get_confirm_inline_kb(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üî• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def get_recs_message(message: Message):
    user_id = message.from_user.id
    await send_recommendations(user_id, message)

# --------- INLINE CALLBACKS

@dp.callback_query(lambda cq: cq.data == "clearreq")
async def cb_clear_req(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "‚ùóÔ∏è <b>–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –≤—Å—ë —É–¥–∞–ª–∏—Ç—å?</b>\n–≠—Ç–æ –Ω–∞–≤—Å–µ–≥–¥–∞!",
        reply_markup=get_confirm_inline_kb(),
        parse_mode="HTML"
    )

@dp.callback_query(lambda cq: cq.data == "clearlist_confirm")
async def cb_clear_confirm(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_views[user_id] = set()
    save_user_views(user_views)
    await callback.answer("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω üëª")
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –£ —Ç–µ–±—è –Ω–æ–≤—ã–π —á–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫ üåà", reply_markup=get_main_kb())

@dp.callback_query(lambda cq: cq.data == "clearlist_cancel")
async def cb_clear_cancel(callback: CallbackQuery):
    await callback.answer("–û—Ç–º–µ–Ω–∞.")
    await callback.message.answer("–§—É—Ö. –ù–∏—á–µ–≥–æ –Ω–µ –æ—á–∏—â–µ–Ω–æ üòÖ", reply_markup=get_main_kb())

@dp.callback_query(lambda cq: cq.data == "getrecs")
async def cb_getrecs(callback: CallbackQuery):
    user_id = callback.from_user.id
    await send_recommendations(user_id, callback.message)
    await callback.answer()

@dp.callback_query(lambda cq: cq.data.startswith("add:"))
async def cb_add_anime(callback: CallbackQuery):
    anime_title = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    user_views.setdefault(user_id, set())
    if anime_title in user_views[user_id]:
        await callback.answer("–£–∂–µ –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ!", show_alert=True)
    else:
        user_views[user_id].add(anime_title)
        save_user_views(user_views)
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
    await callback.message.edit_reply_markup(reply_markup=get_anime_inline_kb(anime_title, True))

@dp.callback_query(lambda cq: cq.data.startswith("remove:"))
async def cb_remove_anime(callback: CallbackQuery):
    anime_title = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    if anime_title in user_views.get(user_id, set()):
        user_views[user_id].remove(anime_title)
        save_user_views(user_views)
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
    else:
        await callback.answer("–≠—Ç–æ–≥–æ –∞–Ω–∏–º–µ –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ.")
    await callback.message.edit_reply_markup(reply_markup=get_anime_inline_kb(anime_title, False))

@dp.callback_query(lambda cq: cq.data.startswith("details:"))
async def cb_show_details(callback: CallbackQuery):
    anime_title = callback.data.split(":", 1)[1]
    row = df[df["title"] == anime_title]
    if row.empty:
        await callback.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ")
        return
    row = row.iloc[0]
    desc = row.get("description", "(–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è)")
    link = row.get("link") or row.get("url") or row.get("siteUrl")
    text = f"üì∞ <b>{anime_title}</b>\n\n{desc[:2000]}\n"
    if link:
        text += f"\n<a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ / Shikimori</a>"
    await callback.answer()
    await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=False)

@dp.callback_query(lambda cq: cq.data.startswith("similar:"))
async def cb_show_similar(callback: CallbackQuery):
    anime_title = callback.data.split(":", 1)[1]
    top_recs = top_similar_by_tags_genres(df, [anime_title], top_n=3)
    await callback.answer()
    if top_recs.empty:
        await callback.message.answer("–ü–æ—Ö–æ–∂–∏—Ö —Ç–∞–π—Ç–ª–æ–≤ –Ω–µ –Ω–∞—à–ª–æ—Å—å ü•π")
        return
    for _, row in top_recs.iterrows():
        preview = anime_preview(row)
        in_list = row['title'] in user_views.get(callback.from_user.id, set())
        if preview["picture"]:
            await callback.message.answer_photo(
                photo=preview["picture"],
                caption=preview["text"][:1024],
                parse_mode="HTML",
                reply_markup=get_anime_inline_kb(row['title'], in_list)
            )
        else:
            await callback.message.answer(
                preview["text"],
                parse_mode="HTML",
                reply_markup=get_anime_inline_kb(row['title'], in_list)
            )

@dp.message()
async def handle_anime_titles(message: Message):
    if message.text in [
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ", "üå∏ –ú–æ–π —Å–ø–∏—Å–æ–∫", "üî• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"
    ]:
        return
    titles = [x.strip() for x in message.text.split(",") if x.strip()]
    user_id = message.from_user.id
    user_views.setdefault(user_id, set())
    if not titles:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –≤–≤—ë–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ü´†", reply_markup=get_main_kb())
        return
    for t in titles:
        matches = find_by_synonyms_fuzzy(df, t, top_n=1)
        if not matches.empty:
            row = matches.iloc[0]
            anime_title = row['title']
            in_list = anime_title in user_views[user_id]
            preview = anime_preview(row)
            if preview["picture"]:
                await message.answer_photo(
                    photo=preview["picture"], 
                    caption=preview["text"][:1024], 
                    parse_mode='HTML',
                    reply_markup=get_anime_inline_kb(anime_title, in_list)
                )
            else:
                await message.answer(
                    preview["text"], 
                    parse_mode='HTML',
                    reply_markup=get_anime_inline_kb(anime_title, in_list)
                )
        else:
            await message.answer(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: <b>{t}</b>",
                parse_mode="HTML"
            )
    await message.answer("–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏ <b>—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b> üëá", parse_mode="HTML", reply_markup=get_main_kb())

async def send_recommendations(user_id, message):
    user_list = user_views.get(user_id, set())
    if not user_list:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É!", reply_markup=get_main_kb())
        return
    await message.answer("–ì–µ–Ω–µ—Ä—é —Ç–æ–ø—á–∏–∫ –¥–ª—è —Ç–µ–±—è... üé≤")
    try:
        top_recs = top_similar_by_tags_genres(df, list(user_list), top_n=5)
        if top_recs.empty:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å ü•≤ –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∞–Ω–∏–º–µ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫!", reply_markup=get_main_kb())
            return
        for _, row in top_recs.iterrows():
            preview = anime_preview(row)
            in_list = row['title'] in user_list
            if preview["picture"]:
                await message.answer_photo(
                    preview["picture"], 
                    preview["text"][:1024], 
                    parse_mode="HTML",
                    reply_markup=get_anime_inline_kb(row['title'], in_list)
                )
            else:
                await message.answer(
                    preview["text"], 
                    parse_mode="HTML",
                    reply_markup=get_anime_inline_kb(row['title'], in_list)
                )
        await message.answer("–í—Å—ë! –ú–æ–∂–µ—à—å –±–∞—Ö–Ω—É—Ç—å /start –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–Ω–∏–º–µ üôÉ", reply_markup=get_main_kb())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ: {e}", reply_markup=get_main_kb())